{
    // Place your snippets for shellscript here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    
    //data 
        //number
        //string
        //array
        //dict

    //control
        //if
        //switch
        //for
        //while
        //goto


    //module
        //function
        //alias


    //io
        //input
        //output

    "bash": {
        "prefix": "/bash",
        "body": [
            "#!/bin/bash"
            ],
        "description": "bash script header"
    },
    "while": {
        "prefix": "/while",
        "body": [
            "while [ $1 ]",
            "do",
                "$2",
            "done"
        ],
        "description": "while statement"
    },

    "case": {
        "prefix": "/case",
        "body": [
            "case \\$${1:var} in",
            "${2:case1})",
                "${3:clause1}",
            ";;",
            "${4:case2})",
                "${5:clause1}",
            ";;",
            "*)",
                "$6",
            ";;",
            "esac"
        ],
        "description": "case statement"
    },

    "function": {
        "prefix": "/func",
        "body": [
            "function $1 (){",
                "$2",
            "}",
        ],
        "description": "function statement"
    },

    //str_len
    "str_len": {
        "prefix": "/str_len",
        "body": [
            "\\${#${1:str}}"
        ],
        "description": "str len"
    },
    //str_replace
    "str_replace": {
        "prefix": "/str_replace",
        "body": [
            "\\${${1:str}/${2:old}/${3:new}}"
        ],
        "description": "str replace"
    },

    //str_replace_all
    "str_replace_all": {
        "prefix": "/str_replace_all",
        "body": [
            "\\${${1:str}//${2:old}/${3:new}}"
        ],
        "description": "str replace"
    },

    //str_slice
    "str_slice": {
        "prefix": "/str_slice",
        "body": [
            "\\${${1:str}:${2:start}:${3:end}}"
        ],
        "description": "str slice"
    },

    "str_case": {
        "prefix": "/str_case",
        "body": [
            "\\${${1:str}${2|^,^^,\\,,\\,\\,|}}"
        ],
        "description": "str case"
    },

    "str_check": {
        "prefix": "/str_check",
        "body": [
            "if [[ -${1|z,n|} \\$${2:str} ]]",
            "then",
            "    ${3}",
            "fi"
        ],
        "description": "str check"
    },

    "str_compare": {
        "prefix": "/str_comapre",
        "body": [
            "if [[ \\$${2:str1} ${1|==,!=|} \\$${3:str2} ]]",
            "then",
            "    ${4}",
            "fi"
        ],
        "description": "str compare"
    },

    "file_check": {
        "prefix": "/file_check",
        "body": [
            "if [ -${1|e,f,d,h,s,r,w,x|} \\$${2:file} ]",
            "then",
            "    ${3}",
            "fi"
        ],
        "description": "file check"
    },

    "file_compare": {
        "prefix": "/file_compare",
        "body": [
            "if [ \\$${2:file1} -${1|nt,ot,ef|}  \\$${3:file2} ]",
            "then",
            "    ${4}",
            "fi"
        ],
        "description": "file compare"
    },

    "for": {
        "prefix": "/for_array",
        "body": [
            "for i in \\${${1:arr}[*]}",
            "do",
                "$3",
            "done"
        ],
        "description": "for statement"
    },

    "for_range": {
        "prefix": "/for_range",
        "body": [
            "for i in {${1:start}..${2:end}..${3:step}}",
            "do",
            "    echo $i",
            "done"
        ],
        "description": "for range"
        },

    "/null": {
        "prefix": "/null",
        "body": [
            "\\${${1:foo}:-${2:val}}",
        ],
        "description": "if fool unset or null return val"
        },
    "/not_null": {
        "prefix": "/not_null",
        "body": [
            "\\${${1:foo}:+${2:val}}",
        ],
        "description": "if fool not null return val"
        },
    "/null_set": {
        "prefix": "/null_set",
        "body": [
            "\\${${1:foo}:=${2:val}}",
        ],
        "description": "if fool unset or null set foo = val"
        },

    "/null_message": {
        "prefix": "/null_message",
        "body": [
            "\\${${1:foo}:?${2:message}}",
        ],
        "description": "if fool unset or null return message"
        },

}
